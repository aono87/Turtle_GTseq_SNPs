# 03_POPULATION_GENETICS_ANALYSIS.R
#
# Workflow Step 3:
# This script performs downstream population genetic analyses using the `gtypes`
# object created in Step 2. It calculates individual homozygosity, tests for
# Hardy-Weinberg Equilibrium (HWE), and Linkage Disequilibrium (LD).
#
# INPUTS:
#   - A `gtypes` object (`.rda` file) from `02_create_gtypes.R`.
#
# OUTPUTS:
#   - CSV files summarizing HWE and LD results (unadjusted and adjusted p-values).
#   - RDA files containing the full result objects for HWE and LD.

# --- LOAD LIBRARIES ---
library(tidyverse)
library(strataG)

# ---------------------------
# --- BEGIN CONFIGURATION ---
# ---------------------------

# --- Project and File Names ---
project.name <- "dcor.wpac.test"
min.reads <- 20 # Used for file naming to match original script

# --- Input Files ---
# Path to the gtypes .rda file created by `02_create_gtypes.R`
gtypes.path <- file.path("data/", paste0("gtypes_", project.name, "_minReads.", min.reads, ".rda"))

# --- Analysis Parameters ---
# Define which strata (populations) you want to include in the analyses.
# These names must match the values in the strata column of your gtypes object.
strata.to.analyze <- c("Bird's Head-Summer", "Bird's Head-Winter", "HaevoSI-Summer", "HaevoSI-Winter", "IsabelSI-South", "Malaysia", "PNG")

# Homozygosity threshold for identifying potential outlier individuals.
# Individuals with homozygosity greater than this value will be flagged.
high.homo.threshold <- 0.7

# LD analysis: Loci with genotyping proportion below this threshold *within a stratum*
# will be removed from that stratum's LD analysis to avoid spurious results.
ld.locus.geno.threshold <- 0.5

# P-value adjustment method for multiple testing (HWE and LD).
# "holm" (Holm-Bonferroni) is a good, standard choice.
p.adjust.method <- "holm"

# --- Output Paths ---
results.raw.path <- "results-raw/"
data.path <- "data/"

# -------------------------
# --- END CONFIGURATION ---
# -------------------------


# ====================================================================
# STEP 1: LOAD DATA AND INITIAL SUMMARIES
# ====================================================================
message("Step 1: Loading gtypes object and preparing data...")
load(gtypes.path)

# Optional: Filter `gtypes` object to only include strata of interest
g <- g[strata(g)$Stratum_ABO %in% strata.to.analyze,]
num.strata <- length(strata.to.analyze)
message(paste("Analyzing", numStrata(g), "strata:", paste(getStrataNames(g), collapse = ", ")))

# ====================================================================
# STEP 2: HOMOZYGOSITY CHECK
# ====================================================================
message("Step 2: Checking for individuals with high homozygosity...")

ind.summary <- summarizeInds(g)
high.homo.samps <- filter(ind.summary, pct.loci.homozygous > high.homo.threshold) %>%
  pull(id)

if (length(high.homo.samps) > 0) {
  message("Warning: Found ", length(high.homo.samps), " individuals with homozygosity > ", high.homo.threshold)
  print(high.homo.samps)
  # Uncomment the line below to physically remove these individuals from the gtypes object
  # g <- g[-which(getIndNames(g) %in% high.homo.samps),]
  # message("High-homozygosity individuals have been removed.")
} else {
  message("No individuals with unusually high homozygosity found.")
}


# ====================================================================
# STEP 3: HARDY-WEINBERG EQUILIBRIUM (HWE) ANALYSIS
# ====================================================================
message("Step 3: Calculating Hardy-Weinberg Equilibrium...")

# Use purrr::map to run hweTest on each stratum and return a list of data frames
hwe.list <- map(strata.to.analyze, ~{
  hweTest(g[,,.x]) %>%
    as.data.frame() %>%
    rownames_to_column(var = "locus") %>%
    rename(!!sym(.x) := p.value) # Rename p-value column to the stratum name
})

# Combine the list of data frames into a single table
hwe.res <- reduce(hwe.list, full_join, by = "locus")

# --- Calculate significance counts ---
# Unadjusted p-values
hwe.res.unadj <- hwe.res %>%
  rowwise() %>%
  mutate(
    num.sig.p = sum(c_across(all_of(strata.to.analyze)) < 0.05, na.rm = TRUE),
    num.sig.bonferroni = sum(c_across(all_of(strata.to.analyze)) < (0.05 / num.strata), na.rm = TRUE)
  ) %>%
  ungroup()

# Adjusted p-values using the chosen method
hwe.p.adj <- hwe.res %>%
  select(all_of(strata.to.analyze)) %>%
  as.matrix() %>%
  apply(1, function(p_vals) p.adjust(p_vals, method = p.adjust.method)) %>%
  t() %>%
  as.data.frame()

# Combine adjusted p-values with locus names and calculate significance
hwe.res.adj <- bind_cols(locus = hwe.res$locus, hwe.p.adj) %>%
  rowwise() %>%
  mutate(num.sig.adj.p = sum(c_across(all_of(strata.to.analyze)) < 0.05, na.rm = TRUE)) %>%
  ungroup() %>%
  arrange(desc(num.sig.adj.p))


# --- Save HWE results ---
write.csv(hwe.res.unadj, file.path(results.raw.path, paste0(project.name, ".hwe.unadjusted.csv")), row.names = FALSE)
write.csv(hwe.res.adj, file.path(results.raw.path, paste0(project.name, ".hwe.adjusted.csv")), row.names = FALSE)
save(hwe.res.unadj, hwe.res.adj, file = file.path(data.path, "hwe.results.rda"))

message("HWE analysis complete. Results saved.")

# ====================================================================
# STEP 4: LINKAGE DISEQUILIBRIUM (LD) ANALYSIS
# ====================================================================
message("Step 4: Calculating Linkage Disequilibrium...")

# Split gtypes object into a list, one for each stratum
g.by.strata <- strataSplit(g)

# --- Pre-filter loci within each stratum for missing data ---
g.filtered.for.ld <- imap(g.by.strata, ~{
  stratum_name <- .y
  g_stratum <- .x

  # Summarize loci for this stratum
  loc_summary <- summarizeLoci(g_stratum)
  loci_to_remove <- loc_summary %>%
    filter(prop.genotyped < ld.locus.geno.threshold) %>%
    pull(locus)

  if (length(loci_to_remove) > 0) {
    message(paste("  - For stratum '", stratum_name, "', removing", length(loci_to_remove), "loci with <", ld.locus.geno.threshold * 100, "% genotyping."))
    g_stratum <- g_stratum[, -which(getLociNames(g_stratum) %in% loci_to_remove),]
  }
  return(g_stratum)
})

# --- Run LD analysis on the filtered list of gtypes ---
# This can take a long time to run.
message("Running LDgenepop on all strata. This may take a while...")
ld.strata.list <- map(g.filtered.for.ld, LDgenepop, quiet = TRUE)

# --- Process LD results ---
ld.sig.res <- imap(ld.strata.list, ~{
  .x %>%
    select(Locus.1, Locus.2, p.value) %>%
    rename(!!sym(paste0('pval.', .y)) := p.value) # Rename p-value column with stratum name
}) %>%
  reduce(full_join, by = c("Locus.1", "Locus.2")) %>%
  drop_na(Locus.1, Locus.2) # Remove pairs where a locus was filtered out

# Calculate unadjusted significance counts
ld.sig.res <- ld.sig.res %>%
  rowwise() %>%
  mutate(
    num.sig.p = sum(c_across(starts_with("pval.")) < 0.05, na.rm = TRUE),
    num.sig.bonferroni = sum(c_across(starts_with("pval.")) < (0.05 / num.strata), na.rm = TRUE)
  ) %>%
  ungroup()

# Calculate adjusted p-values
p.val.cols <- ld.sig.res %>% select(starts_with("pval."))
ld.p.adj <- apply(p.val.cols, 1, function(p) p.adjust(p, method = p.adjust.method, n = sum(!is.na(p)))) %>%
  t() %>%
  as.data.frame()
colnames(ld.p.adj) <- paste0(names(p.val.cols), "_adj")

# Combine adjusted results and calculate significance
ld.res.adj <- ld.sig.res %>%
  select(Locus.1, Locus.2) %>%
  bind_cols(ld.p.adj) %>%
  rowwise() %>%
  mutate(
    num.sig.adj.p = sum(c_across(ends_with("_adj")) < 0.05, na.rm = TRUE)
  ) %>%
  ungroup() %>%
  arrange(desc(num.sig.adj.p))

# --- Save LD results ---
write.csv(ld.sig.res, file.path(results.raw.path, "final.ld.unadjusted.csv"), row.names = FALSE)
write.csv(ld.res.adj, file.path(results.raw.path, "final.ld.adjusted.csv"), row.names = FALSE)
save(ld.sig.res, ld.res.adj, ld.strata.list, file = file.path(data.path, "ld.results.rda"))

message("LD analysis complete. Results saved.")
message("Workflow Step 3 complete!")
